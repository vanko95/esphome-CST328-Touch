# =====================================================================
# ESPHome Configuration for Waveshare ESP32-S3-Touch-LCD-2.8
# -- Display: ST7789 (240x320)
# -- Touch:   CST328/CST816S (I2C)
# =====================================================================

esphome:
  name: waveshare-st7789-lcd
  friendly_name: Waveshare ST7789 LCD
  platformio_options:
    board_build.flash_mode: dio
    # Change '80m' to '80000000' or '80000000L'
    board_build.f_flash: 80000000L
    # board_build.filesystem: littlefs

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# -- Basic Connectivity --
wifi:
# Wifi details go here
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: True
  

# Enable Home Assistant API
api:

ota:
  platform: esphome
  
# Enable logging
logger:
  # baud_rate: 0 # Uncomment to disable logging via USB Serial

# -- Hardware Definitions --

# SPI Bus (For Display Only)
spi:
  clk_pin: GPIO40  # Changed from 14
  mosi_pin: GPIO45 # Changed from 13
  # MISO not typically used by ST7789 display, can often be omitted
  # miso_pin: GPIO3
  id: spi_display_bus

# I2C Bus (For Touch Controller)
i2c:
  sda: GPIO1 # Touch SDA 11
  scl: GPIO3 # Touch SCL 10
  scan: true     # Log found I2C devices on boot (helpful for debugging)
  id: i2c_touch_bus
  frequency: 400kHz # Or try 100kHz

# Backlight Control
output:
  - platform: ledc
    pin: GPIO5 # Changed from 8
    id: backlight_output
    frequency: 1000Hz

light:
  - platform: monochromatic
    name: "LCD Backlight"
    output: backlight_output
    id: lcd_backlight
    restore_mode: ALWAYS_ON

# Fonts
font:
  - file: "gfonts://Roboto" # Google Fonts recommended
    id: font_roboto_small
    size: 16
  - file: "gfonts://Roboto"
    id: font_roboto_medium
    size: 24
  - file: "gfonts://Roboto"
    id: font_roboto_large
    size: 48 # Adjust size based on 240x320 resolution

# Display Configuration (ST7789)
display:
  - platform: st7789v
    id: display_st7789
    model: custom # Generic ST7789
    spi_id: spi_display_bus # Reference the SPI bus
    cs_pin: GPIO42   # Changed from 6
    dc_pin: GPIO41   # Changed from 11
    reset_pin: GPIO39 # Changed from 12
    width: 240      # Native width for this ST7789
    height: 320     # Native height for this ST7789
    offset_width: 0      # <-- ADD THIS LINE
    offset_height: 0     # <-- ADD THIS LINE
    rotation: 0 # Common rotations: 0, 90, 180, 270. Test what works best.
                # 0 = Portrait (narrow edge top)
                # 90 = Landscape (connector usually left/right)
                # 180 = Portrait (upside down)
                # 270 = Landscape (opposite of 90)

    lambda: |-
      // Example: Display Time and a Sensor Value
      int center_x = it.get_width() / 2;
      int center_y = it.get_height() / 2;

      // Draw background
      it.fill(Color::BLACK); // Black is usually safe

      // Display Time (requires time component)
      if (id(homeassistant_time).now().is_valid()) {
        it.strftime(center_x, center_y - 20, id(font_roboto_large), Color::WHITE, TextAlign::CENTER, "%H:%M", id(homeassistant_time).now()); // White is usually safe
        // Use RGB for Light Gray
        it.strftime(center_x, center_y + 30, id(font_roboto_small), Color(192, 192, 192), TextAlign::CENTER, "%a, %b %d", id(homeassistant_time).now());
      } else {
        // Use RGB for Yellow
        it.print(center_x, center_y, id(font_roboto_medium), Color(255, 255, 0), TextAlign::CENTER, "Waiting...");
      }

      // Display a sensor value from Home Assistant (replace with your sensor ID)
      if (id(outside_temperature).has_state()) {
        // Use RGB for Cyan
        it.printf(center_x, it.get_height() - 30, id(font_roboto_medium), Color(0, 255, 255), TextAlign::CENTER, "Living Room: %.1fÂ°C", id(outside_temperature).state);
      } else {
        // Use RGB for Orange
        it.print(center_x, it.get_height() - 30, id(font_roboto_small), Color(255, 165, 0), TextAlign::CENTER, "No Temp Data");
      }
      
      // Draw button for toggling light
      int button_x = 60;
      int button_y = 230;
      int button_w = 120;
      int button_h = 50;

      // Label for Button 1
      it.print(button_x + button_w / 2, button_y - 20, id(font_roboto_small), Color::WHITE, TextAlign::CENTER, "Table");
      
      // Draw button background
      if (id(ha_light).state) {
        it.filled_rectangle(button_x, button_y, button_w, button_h, Color(0, 255, 0)); // Green for ON
        it.print(button_x + button_w / 2, button_y + button_h / 2, id(font_roboto_medium), Color::BLACK, TextAlign::CENTER, "ON");
      } else {
        it.filled_rectangle(button_x, button_y, button_w, button_h, Color(255, 0, 0)); // Red for OFF
        it.print(button_x + button_w / 2, button_y + button_h / 2, id(font_roboto_medium), Color::WHITE, TextAlign::CENTER, "OFF");
      }
      // Button 2 (New, above the clock)
      int button2_x = 60;
      int button2_y = 50;

      // Label for Button 2
      it.print(button2_x + button_w / 2, button2_y - 20, id(font_roboto_small), Color::WHITE, TextAlign::CENTER, "Kitchen");

      
      if (id(ha_second_light).state) {
        it.filled_rectangle(button2_x, button2_y, button_w, button_h, Color(0, 255, 0));
        it.print(button2_x + button_w / 2, button2_y + button_h / 2, id(font_roboto_medium), Color::BLACK, TextAlign::CENTER, "ON");
      } else {
        it.filled_rectangle(button2_x, button2_y, button_w, button_h, Color(255, 0, 0));
        it.print(button2_x + button_w / 2, button2_y + button_h / 2, id(font_roboto_medium), Color::WHITE, TextAlign::CENTER, "OFF");
      }
      
# Touchscreen Configuration (CST328 via I2C)
touchscreen:
  platform: cst328
  id: my_touchscreen
  i2c_id: i2c_touch_bus         
  interrupt_pin: GPIO4
  reset_pin: GPIO2
  address: 0x1A 
  # --------------------------------------------------
 # Add this binary_sensor section
binary_sensor:
  - platform: touchscreen
    name: "LCD Touch Active"       # Name that will appear in Home Assistant
    touchscreen_id: my_touchscreen # Link to the touchscreen component ID
    # Define the area for the virtual button (covering the whole screen)
    # IMPORTANT: Coordinates depend on the 'rotation:' value in your 'display:' section
    # Assuming rotation: 0 (Width=240, Height=320)
    x_min: 60
    y_min: 230
    x_max: 180
    y_max: 280
    on_press:
      then:
        - homeassistant.service:  # Toggle light
            service: switch.toggle
            data:
              entity_id: switch.light_2

  - platform: touchscreen
    name: "LCD Touch Second Button"
    touchscreen_id: my_touchscreen
    x_min: 60
    y_min: 50
    x_max: 180
    y_max: 100
    on_press:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: switch.light_1

  - platform: homeassistant
    id: ha_light
    entity_id: switch.light_2
    name: "Table Light State"
    on_state:
      then:
        - component.update: display_st7789

  - platform: homeassistant
    id: ha_second_light
    entity_id: switch.light_1
    name: "Kitchen Light State" 
    on_state:
      then:
        - component.update: display_st7789

# Time component (needed for displaying time)
time:
  - platform: homeassistant
    id: homeassistant_time
    # Add the timezone specification here
    timezone: Europe/Sofia

# Example Sensor from Home Assistant (replace with your actual sensor)
sensor:
  - platform: homeassistant
    id: outside_temperature # Make sure this ID matches an entity_id in Home Assistant
    entity_id: sensor.ir_remote_ir_temperature # Example Entity ID
    internal: true # Don't expose this back to HA, just use it locally

i2s_audio:
  - id: i2s_dac_output
    i2s_lrclk_pin: GPIO38   # GPIO Table: I2S LRCK
    i2s_bclk_pin: GPIO48    # GPIO Table: I2S BCK (Conflicts with Amp Enable!)
media_player:
  - platform: i2s_audio
    name: ESPHome I2S Media Player
    dac_type: external
    i2s_dout_pin: GPIO47
    mode: stereo

external_components:
  - source:
      type: git
      url: https://github.com/BluetriX/esphome-CST328-Touch
    components: [cst328]
